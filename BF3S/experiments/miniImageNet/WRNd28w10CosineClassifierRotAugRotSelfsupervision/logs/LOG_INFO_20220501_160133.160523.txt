==> Tensorboard file location: /Users/zhuang/Desktop/few-shot-learning-cv/BF3S/experiments/miniImageNet/WRNd28w10CosineClassifierRotAugRotSelfsupervision/logs/TENSORBOARD
Algorithm options {'data_train_opt': {'dataset_name': 'MiniImageNet80x80', 'nKnovel': 0, 'nKbase': 64, 'n_exemplars': 0, 'n_test_novel': 0, 'n_test_base': 64, 'batch_size': 1, 'epoch_size': 1000, 'phase': 'train'}, 'data_test_opt': {'dataset_name': 'MiniImageNet80x80', 'nKnovel': 5, 'nKbase': 64, 'n_exemplars': 1, 'n_test_novel': 75, 'n_test_base': 75, 'batch_size': 1, 'epoch_size': 500}, 'max_num_epochs': 26, 'networks': {'feature_extractor': {'def_file': 'feature_extractors.wide_resnet', 'pretrained': None, 'opt': {'depth': 28, 'widen_Factor': 10, 'drop_rate': 0.0, 'pool': 'none'}, 'optim_params': {'optim_type': 'sgd', 'lr': 0.1, 'momentum': 0.9, 'weight_decay': 0.0005, 'nesterov': True, 'LUT_lr': [(20, 0.1), (23, 0.01), (26, 0.001)]}}, 'classifier': {'def_file': 'classifiers.cosine_classifier_with_weight_generator', 'pretrained': None, 'opt': {'num_classes': 64, 'num_features': 640, 'scale_cls': 10, 'learn_scale': True, 'global_pooling': True}, 'optim_params': {'optim_type': 'sgd', 'lr': 0.1, 'momentum': 0.9, 'weight_decay': 0.0005, 'nesterov': True, 'LUT_lr': [(20, 0.1), (23, 0.01), (26, 0.001)]}}, 'classifier_aux': {'def_file': 'classifiers.convnet_plus_classifier', 'pretrained': None, 'opt': {'convnet_type': 'wrn_block', 'convnet_opt': {'num_channels_in': 640, 'num_channels_out': 640, 'num_layers': 4, 'stride': 2}, 'classifier_opt': {'classifier_type': 'cosine', 'num_channels': 640, 'scale_cls': 10.0, 'learn_scale': True, 'num_classes': 4, 'global_pooling': True}}, 'optim_params': {'optim_type': 'sgd', 'lr': 0.1, 'momentum': 0.9, 'weight_decay': 0.0005, 'nesterov': True, 'LUT_lr': [(20, 0.1), (23, 0.01), (26, 0.001)]}}}, 'criterions': {'loss': {'ctype': 'CrossEntropyLoss', 'opt': None}}, 'algorithm_type': 'selfsupervision.fewshot_selfsupervision_rotation', 'auxiliary_rotation_task_coef': 1.0, 'rotation_invariant_classifier': True, 'random_rotation': False, 'exp_dir': '/Users/zhuang/Desktop/few-shot-learning-cv/BF3S/experiments/miniImageNet/WRNd28w10CosineClassifierRotAugRotSelfsupervision', 'disp_step': 200}
Set network feature_extractor
==> Initiliaze network feature_extractor from file feature_extractors.wide_resnet with opts: {'depth': 28, 'widen_Factor': 10, 'drop_rate': 0.0, 'pool': 'none'}
==> Network architecture:
WideResnet(
  (_feature_blocks): ModuleList(
    (0): Sequential(
      (Conv): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (BN): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (ReLU): ReLU(inplace)
    )
    (1): Sequential(
      (Block): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (convResidual): Sequential(
              (conv1): Conv2d(16, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace)
              (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
            (convShortcut): Conv2d(16, 160, kernel_size=(1, 1), stride=(2, 2), bias=False)
          )
          (1): BasicBlock(
            (convResidual): Sequential(
              (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace)
              (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace)
              (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
            (convShortcut): Sequential()
          )
          (2): BasicBlock(
            (convResidual): Sequential(
              (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace)
              (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace)
              (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
            (convShortcut): Sequential()
          )
          (3): BasicBlock(
            (convResidual): Sequential(
              (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace)
              (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace)
              (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
            (convShortcut): Sequential()
          )
        )
      )
      (BN): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (ReLU): ReLU(inplace)
    )
    (2): Sequential(
      (Block): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (convResidual): Sequential(
              (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace)
              (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
            (convShortcut): Conv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
          )
          (1): BasicBlock(
            (convResidual): Sequential(
              (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace)
              (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace)
              (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
            (convShortcut): Sequential()
          )
          (2): BasicBlock(
            (convResidual): Sequential(
              (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace)
              (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace)
              (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
            (convShortcut): Sequential()
          )
          (3): BasicBlock(
            (convResidual): Sequential(
              (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace)
              (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace)
              (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
            (convShortcut): Sequential()
          )
        )
      )
      (BN): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (ReLU): ReLU(inplace)
    )
    (3): Sequential(
      (Block): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (convResidual): Sequential(
              (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace)
              (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
            (convShortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
          )
          (1): BasicBlock(
            (convResidual): Sequential(
              (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace)
              (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace)
              (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
            (convShortcut): Sequential()
          )
          (2): BasicBlock(
            (convResidual): Sequential(
              (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace)
              (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace)
              (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
            (convShortcut): Sequential()
          )
          (3): BasicBlock(
            (convResidual): Sequential(
              (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu1): ReLU(inplace)
              (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu2): ReLU(inplace)
              (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
            (convShortcut): Sequential()
          )
        )
      )
      (BN): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (ReLU): ReLU(inplace)
    )
  )
)
Set network classifier
==> Initiliaze network classifier from file classifiers.cosine_classifier_with_weight_generator with opts: {'num_classes': 64, 'num_features': 640, 'scale_cls': 10, 'learn_scale': True, 'global_pooling': True}
==> Network architecture:
CosineClassifierWithWeightGeneration()
Set network classifier_aux
==> Initiliaze network classifier_aux from file classifiers.convnet_plus_classifier with opts: {'convnet_type': 'wrn_block', 'convnet_opt': {'num_channels_in': 640, 'num_channels_out': 640, 'num_layers': 4, 'stride': 2}, 'classifier_opt': {'classifier_type': 'cosine', 'num_channels': 640, 'scale_cls': 10.0, 'learn_scale': True, 'num_classes': 4, 'global_pooling': True}}
==> Network architecture:
ConvnetPlusClassifier(
  (layers): Sequential(
    (0): WideResnetBlock(
      (block): Sequential(
        (Block): NetworkBlock(
          (layer): Sequential(
            (0): BasicBlock(
              (convResidual): Sequential(
                (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu2): ReLU(inplace)
                (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
              (convShortcut): Conv2d(640, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
            )
            (1): BasicBlock(
              (convResidual): Sequential(
                (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu1): ReLU(inplace)
                (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu2): ReLU(inplace)
                (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
              (convShortcut): Sequential()
            )
            (2): BasicBlock(
              (convResidual): Sequential(
                (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu1): ReLU(inplace)
                (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu2): ReLU(inplace)
                (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
              (convShortcut): Sequential()
            )
            (3): BasicBlock(
              (convResidual): Sequential(
                (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu1): ReLU(inplace)
                (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu2): ReLU(inplace)
                (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
              (convShortcut): Sequential()
            )
          )
        )
        (BN): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (ReLU): ReLU(inplace)
      )
    )
    (1): Classifier(
      (layers): CosineClassifier(num_channels=640, num_classes=4, scale_cls=10.0 (learnable=True), normalize_x=True, normalize_w=True, bias=False)
    )
  )
)
Initialize criterion[loss]: CrossEntropyLoss with options: None
Initialize optimizer: sgd with params: {'optim_type': 'sgd', 'lr': 0.1, 'momentum': 0.9, 'weight_decay': 0.0005, 'nesterov': True, 'LUT_lr': [(20, 0.1), (23, 0.01), (26, 0.001)]} for netwotk: feature_extractor
Initialize optimizer: sgd with params: {'optim_type': 'sgd', 'lr': 0.1, 'momentum': 0.9, 'weight_decay': 0.0005, 'nesterov': True, 'LUT_lr': [(20, 0.1), (23, 0.01), (26, 0.001)]} for netwotk: classifier
Initialize optimizer: sgd with params: {'optim_type': 'sgd', 'lr': 0.1, 'momentum': 0.9, 'weight_decay': 0.0005, 'nesterov': True, 'LUT_lr': [(20, 0.1), (23, 0.01), (26, 0.001)]} for netwotk: classifier_aux
Training epoch [  1 /  26]
==> Set to feature_extractor optimizer lr = 0.1000000000
==> Set to classifier optimizer lr = 0.1000000000
==> Set to classifier_aux optimizer lr = 0.1000000000
Training: WRNd28w10CosineClassifierRotAugRotSelfsupervision
==> Dataset: MiniImageNet_train [1000 batches]
